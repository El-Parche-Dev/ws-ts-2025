#!/bin/bash

# ===================================================================
# VALIDADOR D√çA 10: RESOLUCI√ìN DE PROBLEMAS DE ALGORITMIA
# Verifica estructura, archivos y contenido del entrenamiento
# ===================================================================

echo "üß© VALIDANDO D√çA 10: RESOLUCI√ìN DE PROBLEMAS DE ALGORITMIA"
echo "============================================================"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Funci√≥n para validar archivo
check_file() {
    local file_path="$1"
    local description="$2"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -f "$file_path" ]; then
        echo -e "‚úÖ ${GREEN}PASS${NC}: $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "‚ùå ${RED}FAIL${NC}: $description"
        echo -e "   ${YELLOW}Archivo faltante: $file_path${NC}"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Funci√≥n para validar directorio
check_dir() {
    local dir_path="$1"
    local description="$2"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -d "$dir_path" ]; then
        echo -e "‚úÖ ${GREEN}PASS${NC}: $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "‚ùå ${RED}FAIL${NC}: $description"
        echo -e "   ${YELLOW}Directorio faltante: $dir_path${NC}"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Funci√≥n para validar contenido de archivo
check_content() {
    local file_path="$1"
    local pattern="$2"
    local description="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -f "$file_path" ] && grep -q "$pattern" "$file_path"; then
        echo -e "‚úÖ ${GREEN}PASS${NC}: $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "‚ùå ${RED}FAIL${NC}: $description"
        if [ ! -f "$file_path" ]; then
            echo -e "   ${YELLOW}Archivo no existe: $file_path${NC}"
        else
            echo -e "   ${YELLOW}Patr√≥n no encontrado: $pattern${NC}"
        fi
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Funci√≥n para contar archivos en directorio
count_files() {
    local dir_path="$1"
    local expected="$2"
    local description="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -d "$dir_path" ]; then
        local count=$(find "$dir_path" -maxdepth 1 -type d | wc -l)
        count=$((count - 1)) # Resta el directorio padre
        
        if [ "$count" -ge "$expected" ]; then
            echo -e "‚úÖ ${GREEN}PASS${NC}: $description ($count/$expected ejercicios)"
            PASSED_CHECKS=$((PASSED_CHECKS + 1))
        else
            echo -e "‚ùå ${RED}FAIL${NC}: $description ($count/$expected ejercicios)"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
        fi
    else
        echo -e "‚ùå ${RED}FAIL${NC}: $description (directorio no existe)"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Definir rutas base
BASE_DIR="entrenamiento/dia-10-resolucion-de-problemas"

echo -e "\n${BLUE}üìÅ VALIDANDO ESTRUCTURA PRINCIPAL${NC}"
echo "-----------------------------------"

# Estructura principal
check_dir "$BASE_DIR" "Directorio principal D√≠a 10"
check_file "$BASE_DIR/README.md" "README principal del d√≠a"
check_dir "$BASE_DIR/00-estrategias-generales" "Carpeta de estrategias generales"
check_dir "$BASE_DIR/01-10-fundamentos-guiados" "Carpeta ejercicios 1-10"
check_dir "$BASE_DIR/11-30-practica-supervisada" "Carpeta ejercicios 11-30"
check_dir "$BASE_DIR/31-50-desafio-autonomo" "Carpeta ejercicios 31-50"
check_dir "$BASE_DIR/evaluacion" "Carpeta de evaluaci√≥n"
check_dir "$BASE_DIR/herramientas" "Carpeta de herramientas"

echo -e "\n${BLUE}üìã VALIDANDO CONTENIDO DEL README PRINCIPAL${NC}"
echo "--------------------------------------------"

# Contenido del README principal
check_content "$BASE_DIR/README.md" "D√≠a 10: Resoluci√≥n de Problemas" "T√≠tulo del d√≠a correcto"
check_content "$BASE_DIR/README.md" "CRONOGRAMA DETALLADO" "Cronograma incluido"
check_content "$BASE_DIR/README.md" "ESTRUCTURA DE DIFICULTAD" "Estructura de dificultad explicada"
check_content "$BASE_DIR/README.md" "WorldSkills" "Orientaci√≥n WorldSkills"
check_content "$BASE_DIR/README.md" "MVP" "Metodolog√≠a MVP incluida"

echo -e "\n${BLUE}üéØ VALIDANDO ESTRATEGIAS GENERALES${NC}"
echo "------------------------------------"

# Estrategias generales
check_file "$BASE_DIR/00-estrategias-generales/README.md" "README de estrategias generales"
check_content "$BASE_DIR/00-estrategias-generales/README.md" "METODOLOG√çA" "Metodolog√≠a de resoluci√≥n"
check_content "$BASE_DIR/00-estrategias-generales/README.md" "AN√ÅLISIS" "Framework de an√°lisis"

echo -e "\n${BLUE}üåü VALIDANDO EJERCICIOS 1-10 (FUNDAMENTOS)${NC}"
echo "--------------------------------------------"

# Ejercicios fundamentales espec√≠ficos
exercises_1_10=(
    "ejercicio-01-suma-array"
    "ejercicio-02-numero-par"
    "ejercicio-03-convertidor-temperatura"
    "ejercicio-04-contador-vocales"
    "ejercicio-05-inversor-cadenas"
    "ejercicio-06-palindromo-detector"
    "ejercicio-07-calculadora-promedio"
    "ejercicio-08-contador-palabras"
    "ejercicio-09-generador-primos"
    "ejercicio-10-factorial"
)

for exercise in "${exercises_1_10[@]}"; do
    check_dir "$BASE_DIR/01-10-fundamentos-guiados/$exercise" "Ejercicio $exercise existe"
    check_file "$BASE_DIR/01-10-fundamentos-guiados/$exercise/README.md" "README del $exercise"
    
    # Validar contenido espec√≠fico de ejercicios guiados
    if [ -f "$BASE_DIR/01-10-fundamentos-guiados/$exercise/README.md" ]; then
        check_content "$BASE_DIR/01-10-fundamentos-guiados/$exercise/README.md" "FASE CORE" "Metodolog√≠a MVP - Fase Core"
        check_content "$BASE_DIR/01-10-fundamentos-guiados/$exercise/README.md" "AN√ÅLISIS PASO A PASO" "An√°lisis paso a paso incluido"
        check_content "$BASE_DIR/01-10-fundamentos-guiados/$exercise/README.md" "CONCEPTOS CLAVE" "Conceptos clave explicados"
    fi
done

echo -e "\n${BLUE}‚ö° VALIDANDO EJERCICIOS 11-30 (PR√ÅCTICA)${NC}"
echo "-------------------------------------------"

# Verificar que existen ejercicios de pr√°ctica
count_files "$BASE_DIR/11-30-practica-supervisada" 5 "M√≠nimo 5 ejercicios de pr√°ctica"

# Validar algunos ejercicios espec√≠ficos
practice_exercises=(
    "ejercicio-11-array-maximo"
    "ejercicio-12-filtrar-pares"
    "ejercicio-13-capitalizar-palabras"
    "ejercicio-14-remover-duplicados"
    "ejercicio-15-buscar-elemento"
)

for exercise in "${practice_exercises[@]}"; do
    if [ -d "$BASE_DIR/11-30-practica-supervisada/$exercise" ]; then
        check_file "$BASE_DIR/11-30-practica-supervisada/$exercise/README.md" "README del $exercise"
        check_content "$BASE_DIR/11-30-practica-supervisada/$exercise/README.md" "Tiempo l√≠mite" "Timeboxing definido"
    fi
done

echo -e "\n${BLUE}üèÜ VALIDANDO EJERCICIOS 31-50 (DESAF√çO)${NC}"
echo "-------------------------------------------"

# Verificar ejercicios de desaf√≠o
count_files "$BASE_DIR/31-50-desafio-autonomo" 3 "M√≠nimo 3 ejercicios de desaf√≠o"

# Validar ejercicios espec√≠ficos de desaf√≠o
challenge_exercises=(
    "ejercicio-31-fibonacci-recursivo"
    "ejercicio-46-quicksort"
    "ejercicio-50-sistema-tareas-final"
)

for exercise in "${challenge_exercises[@]}"; do
    if [ -d "$BASE_DIR/31-50-desafio-autonomo/$exercise" ]; then
        check_file "$BASE_DIR/31-50-desafio-autonomo/$exercise/README.md" "README del $exercise"
        check_content "$BASE_DIR/31-50-desafio-autonomo/$exercise/README.md" "Avanzado" "Nivel avanzado marcado"
        check_content "$BASE_DIR/31-50-desafio-autonomo/$exercise/README.md" "WorldSkills" "Orientaci√≥n WorldSkills"
    fi
done

echo -e "\n${BLUE}üìä VALIDANDO SISTEMA DE EVALUACI√ìN${NC}"
echo "-------------------------------------"

# Sistema de evaluaci√≥n
check_file "$BASE_DIR/evaluacion/README.md" "README del sistema de evaluaci√≥n"
check_content "$BASE_DIR/evaluacion/README.md" "R√öBRICAS" "R√∫bricas de evaluaci√≥n"
check_content "$BASE_DIR/evaluacion/README.md" "WORLDSKILLS" "Sistema de calificaci√≥n WorldSkills"
check_content "$BASE_DIR/evaluacion/README.md" "M√âTRICAS" "M√©tricas de progreso"

echo -e "\n${BLUE}üîß VALIDANDO HERRAMIENTAS${NC}"
echo "----------------------------"

# Herramientas de desarrollo
check_file "$BASE_DIR/herramientas/README.md" "README de herramientas"
check_content "$BASE_DIR/herramientas/README.md" "TEST RUNNER" "Test runner autom√°tico"
check_content "$BASE_DIR/herramientas/README.md" "PERFORMANCE" "Analizador de rendimiento"
check_content "$BASE_DIR/herramientas/README.md" "VALIDADOR" "Validador de soluciones"

echo -e "\n${BLUE}üéØ VALIDANDO METODOLOG√çA MVP${NC}"
echo "--------------------------------"

# Verificar implementaci√≥n de metodolog√≠a MVP
mvp_files=(
    "$BASE_DIR/README.md"
    "$BASE_DIR/01-10-fundamentos-guiados/ejercicio-01-suma-array/README.md"
    "$BASE_DIR/01-10-fundamentos-guiados/ejercicio-02-numero-par/README.md"
)

for file in "${mvp_files[@]}"; do
    if [ -f "$file" ]; then
        check_content "$file" "FASE CORE" "Metodolog√≠a MVP - Fase Core implementada"
        check_content "$file" "Tiempo estimado" "Timeboxing implementado"
    fi
done

echo -e "\n${BLUE}üìà VALIDANDO PROGRESI√ìN DE DIFICULTAD${NC}"
echo "---------------------------------------"

# Verificar que hay progresi√≥n de dificultad
difficulty_markers=(
    "‚≠ê B√°sico"
    "‚≠ê‚≠ê‚≠ê Intermedio"
    "‚≠ê‚≠ê‚≠ê‚≠ê Avanzado"
    "üèÜ Experto"
)

for marker in "${difficulty_markers[@]}"; do
    if grep -r "$marker" "$BASE_DIR" > /dev/null 2>&1; then
        echo -e "‚úÖ ${GREEN}PASS${NC}: Nivel '$marker' encontrado"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "‚ùå ${RED}FAIL${NC}: Nivel '$marker' no encontrado"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
done

# ===================================================================
# REPORTE FINAL
# ===================================================================

echo -e "\n${BLUE}üìã REPORTE FINAL DE VALIDACI√ìN${NC}"
echo "=================================="

SUCCESS_RATE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))

echo -e "‚úÖ Tests exitosos: ${GREEN}$PASSED_CHECKS${NC}"
echo -e "‚ùå Tests fallidos: ${RED}$FAILED_CHECKS${NC}"
echo -e "üìä Total de tests: $TOTAL_CHECKS"
echo -e "üìà Tasa de √©xito: ${GREEN}$SUCCESS_RATE%${NC}"

if [ $SUCCESS_RATE -ge 90 ]; then
    echo -e "\nüèÜ ${GREEN}EXCELENTE${NC}: D√≠a 10 implementado correctamente"
    echo -e "   ¬°Listo para entrenamiento WorldSkills!"
elif [ $SUCCESS_RATE -ge 80 ]; then
    echo -e "\nü•à ${YELLOW}BUENO${NC}: Implementaci√≥n s√≥lida con mejoras menores"
    echo -e "   Revisar elementos faltantes antes del entrenamiento"
elif [ $SUCCESS_RATE -ge 70 ]; then
    echo -e "\nü•â ${YELLOW}ACEPTABLE${NC}: Estructura b√°sica completa"
    echo -e "   Completar elementos faltantes antes del entrenamiento"
else
    echo -e "\n‚ùå ${RED}REQUIERE TRABAJO${NC}: Implementaci√≥n incompleta"
    echo -e "   Completar elementos cr√≠ticos antes de continuar"
fi

echo -e "\nüí° ${BLUE}Sugerencias:${NC}"

if [ $FAILED_CHECKS -gt 0 ]; then
    echo -e "   ‚Ä¢ Revisar elementos marcados como FAIL"
    echo -e "   ‚Ä¢ Completar archivos README faltantes"
    echo -e "   ‚Ä¢ Verificar contenido de metodolog√≠a MVP"
fi

echo -e "   ‚Ä¢ Ejecutar tests con las herramientas incluidas"
echo -e "   ‚Ä¢ Validar que los ejercicios funcionan correctamente"
echo -e "   ‚Ä¢ Preparar datos de prueba para entrenamiento"

echo -e "\nüéØ ${GREEN}¬°D√≠a 10 de Resoluci√≥n de Problemas validado!${NC}"

# Guardar reporte en archivo
{
    echo "REPORTE DE VALIDACI√ìN - D√çA 10"
    echo "==============================="
    echo "Fecha: $(date)"
    echo "Tests exitosos: $PASSED_CHECKS"
    echo "Tests fallidos: $FAILED_CHECKS"
    echo "Total: $TOTAL_CHECKS"
    echo "Tasa de √©xito: $SUCCESS_RATE%"
} > "$BASE_DIR/reporte-validacion.txt"

echo -e "\nüìÑ Reporte guardado en: ${BLUE}$BASE_DIR/reporte-validacion.txt${NC}"

# Exit code basado en el resultado
if [ $SUCCESS_RATE -ge 80 ]; then
    exit 0
else
    exit 1
fi
